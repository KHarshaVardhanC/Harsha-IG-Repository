Simple Questions:
-----------------

1)

SELECT MEMBER_ID, MEMBER_NAME, CITY, MEMBERSHIP_STATUS
FROM LMS_MEMBERS
WHERE MEMBERSHIP_STATUS = 'Permanent';


2)

SELECT B.BOOK_CODE, B.PUBLICATION, B.PRICE, S.SUPPLIER_NAME
FROM LMS_BOOK_DETAILS B
JOIN LMS_SUPPLIERS_DETAILS S ON B.SUPPLIER_ID = S.SUPPLIER_ID
JOIN LMS_BOOK_ISSUE I ON B.BOOK_CODE = I.BOOK_CODE
GROUP BY B.BOOK_CODE
ORDER BY COUNT(I.BOOK_CODE) DESC
LIMIT 1;


3)

SELECT M.MEMBER_ID, M.MEMBER_NAME
FROM LMS_BOOK_ISSUE I
JOIN LMS_MEMBERS M ON I.MEMBER_ID = M.MEMBER_ID
WHERE I.BOOK_CODE = 'BL000002';


4)

SELECT BOOK_CODE, BOOK_TITLE, AUTHOR
FROM LMS_BOOK_DETAILS
WHERE AUTHOR LIKE 'P%';


5)

SELECT COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
WHERE CATEGORY = 'JAVA';


6)

SELECT CATEGORY, COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
GROUP BY CATEGORY;


7)

SELECT COUNT(*) AS NO_OF_BOOKS
FROM LMS_BOOK_DETAILS
WHERE PUBLICATION = 'Prentice Hall';


8)

SELECT B.BOOK_CODE, B.BOOK_TITLE
FROM LMS_BOOK_ISSUE I
JOIN LMS_BOOK_DETAILS B ON I.BOOK_CODE = B.BOOK_CODE
WHERE I.DATE_ISSUE = '2012-04-01';


9)

SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER, DATE_EXPIRE
FROM LMS_MEMBERS
WHERE DATE_EXPIRE < '2013-04-01';


10)

SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER, MEMBERSHIP_STATUS
FROM LMS_MEMBERS
WHERE DATE_REGISTER < '2012-03-01'
AND MEMBERSHIP_STATUS = 'Temporary';


11)

SELECT MEMBER_ID, INITCAP(MEMBER_NAME) AS Name
FROM LMS_MEMBERS
WHERE CITY IN ('CHENNAI', 'DELHI');


12)

SELECT CONCAT(BOOK_TITLE, '_is_written_by_', AUTHOR) AS BOOK_WRITTEN_BY
FROM LMS_BOOK_DETAILS
GROUP BY BOOK_TITLE, AUTHOR;


13)

SELECT AVG(PRICE) AS AVERAGEPRICE
FROM LMS_BOOK_DETAILS
WHERE CATEGORY = 'JAVA';


14)

SELECT SUPPLIER_ID, SUPPLIER_NAME, EMAIL
FROM LMS_SUPPLIERS_DETAILS
WHERE EMAIL LIKE '%@gmail.com';


15)

SELECT SUPPLIER_ID, SUPPLIER_NAME, 
       COALESCE(CAST(CONTACT AS CHAR), EMAIL, ADDRESS) AS CONTACTDETAILS
FROM LMS_SUPPLIERS_DETAILS;


16)

SELECT SUPPLIER_ID, SUPPLIER_NAME, 
       IF(ISNULL(CONTACT), 'No', 'Yes') AS PHONENUMAVAILABLE
FROM LMS_SUPPLIERS_DETAILS;


17)

SELECT M.MEMBER_ID, M.MEMBER_NAME, M.CITY, M.MEMBERSHIP_STATUS, 
       IFNULL(SUM(F.FINE_AMOUNT), 0) AS Fine
FROM LMS_MEMBERS M
LEFT JOIN LMS_BOOK_ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
LEFT JOIN LMS_FINE_DETAILS F ON I.FINE_RANGE = F.FINE_RANGE
GROUP BY M.MEMBER_ID;




Average Questions
----------------

1)

SELECT M.MEMBER_ID, M.MEMBER_NAME, B.BOOK_CODE, B.BOOK_TITLE
FROM LMS_BOOK_ISSUE I
JOIN LMS_MEMBERS M ON I.MEMBER_ID = M.MEMBER_ID
JOIN LMS_BOOK_DETAILS B ON I.BOOK_CODE = B.BOOK_CODE;



2)

SELECT COUNT(*) AS NO_OF_BOOKS_AVAILABLE
FROM LMS_BOOK_DETAILS
WHERE BOOK_CODE NOT IN (SELECT BOOK_CODE FROM LMS_BOOK_ISSUE);


3)

SELECT M.MEMBER_ID, M.MEMBER_NAME, F.FINE_RANGE, F.FINE_AMOUNT
FROM LMS_BOOK_ISSUE I
JOIN LMS_MEMBERS M ON I.MEMBER_ID = M.MEMBER_ID
JOIN LMS_FINE_DETAILS F ON I.FINE_RANGE = F.FINE_RANGE
WHERE F.FINE_AMOUNT < 100;


4)

SELECT BOOK_CODE, BOOK_TITLE, PUBLICATION, BOOK_EDITION, PRICE, YEAR(PUBLISH_DATE) AS PUB_YEAR
FROM LMS_BOOK_DETAILS
ORDER BY PUB_YEAR, PUBLICATION, BOOK_EDITION;


5)

SELECT BOOK_CODE, BOOK_TITLE, RACK_NUM
FROM LMS_BOOK_DETAILS
WHERE RACK_NUM = 'A1'
ORDER BY BOOK_TITLE;


6)

SELECT I.MEMBER_ID, M.MEMBER_NAME, I.DATE_ISSUE AS DUE_DATE, I.DATE_RETURNED
FROM LMS_BOOK_ISSUE I
JOIN LMS_MEMBERS M ON I.MEMBER_ID = M.MEMBER_ID
WHERE I.DATE_RETURNED > I.DATE_ISSUE;


7)

SELECT M.MEMBER_ID, M.MEMBER_NAME, M.DATE_REGISTER
FROM LMS_MEMBERS M
LEFT JOIN LMS_BOOK_ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
WHERE I.BOOK_CODE IS NULL;


8)

SELECT M.MEMBER_ID, M.MEMBER_NAME
FROM LMS_MEMBERS M
LEFT JOIN LMS_BOOK_ISSUE I ON M.MEMBER_ID = I.MEMBER_ID
LEFT JOIN LMS_FINE_DETAILS F ON I.FINE_RANGE = F.FINE_RANGE
WHERE YEAR(I.DATE_ISSUE) = 2012
AND F.FINE_AMOUNT IS NULL;


9)

SELECT DATE_ISSUE, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_ISSUE
GROUP BY DATE_ISSUE
ORDER BY NOOFBOOKS DESC
LIMIT 1;



10)


SELECT BOOK_TITLE, SUPPLIER_ID
FROM LMS_BOOK_DETAILS
WHERE AUTHOR = 'Herbert Schildt' AND BOOK_EDITION = 5 AND SUPPLIER_ID = 'S01';



11)

SELECT RACK_NUM, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_DETAILS
GROUP BY RACK_NUM
ORDER BY RACK_NUM;



12)

SELECT I.BOOK_ISSUE_NO, M.MEMBER_NAME, M.DATE_REGISTER, M.DATE_EXPIRE, 
       B.BOOK_TITLE, B.CATEGORY, B.AUTHOR, B.PRICE, 
       I.DATE_ISSUE, I.DATE_RETURN, I.DATE_RETURNED, 
       IF(I.DATE_RETURNED IS NULL, 'Not Returned', 'Returned') AS ISSUE_STATUS, 
       F.FINE_AMOUNT
FROM LMS_BOOK_ISSUE I
JOIN LMS_MEMBERS M ON I.MEMBER_ID = M.MEMBER_ID
JOIN LMS_BOOK_DETAILS B ON I.BOOK_CODE = B.BOOK_CODE
LEFT JOIN LMS_FINE_DETAILS F ON I.FINE_RANGE = F.FINE_RANGE;



13)

SELECT BOOK_CODE, BOOK_TITLE, PUBLISH_DATE
FROM LMS_BOOK_DETAILS
WHERE MONTH(PUBLISH_DATE) = 12;



14)

SELECT B.BOOK_CODE, B.BOOK_TITLE, S.SUPPLIER_NAME, B.PRICE
FROM LMS_BOOK_DETAILS B
JOIN LMS_SUPPLIERS_DETAILS S ON B.SUPPLIER_ID = S.SUPPLIER_ID
WHERE B.PRICE = (SELECT MAX(PRICE) FROM LMS_BOOK_DETAILS WHERE SUPPLIER_ID = B.SUPPLIER_ID);


15)


SELECT BOOK_CODE, BOOK_TITLE, PUBLICATION, TIMESTAMPDIFF(YEAR, PUBLISH_DATE, CURDATE()) AS BOOK_AGE
FROM LMS_BOOK_DETAILS
ORDER BY BOOK_AGE;





Complex Questions:
-------------------

1)

SELECT B.BOOK_CODE, B.BOOK_TITLE, S.SUPPLIER_NAME
FROM LMS_BOOK_DETAILS B
JOIN LMS_SUPPLIERS_DETAILS S ON B.SUPPLIER_ID = S.SUPPLIER_ID
WHERE S.SUPPLIER_ID = (
    SELECT SUPPLIER_ID
    FROM LMS_BOOK_DETAILS
    GROUP BY SUPPLIER_ID
    ORDER BY COUNT(*) DESC
    LIMIT 1
);


2)

SELECT M.MEMBER_ID, M.MEMBER_NAME, 
       3 - COUNT(I.BOOK_CODE) AS REMAININGBOOKS
FROM LMS_MEMBERS M
LEFT JOIN LMS_BOOK_ISSUE I ON M.MEMBER_ID = I.MEMBER_ID AND I.DATE_RETURNED IS NULL
GROUP BY M.MEMBER_ID, M.MEMBER_NAME;


3)

SELECT SUPPLIER_ID, SUPPLIER_NAME
FROM LMS_SUPPLIERS_DETAILS
WHERE SUPPLIER_ID = (
    SELECT SUPPLIER_ID
    FROM LMS_BOOK_DETAILS
    GROUP BY SUPPLIER_ID
    ORDER BY COUNT(*) ASC
    LIMIT 1
);
